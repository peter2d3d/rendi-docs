{
  "openapi": "3.1.0",
  "info": {
    "title": "FFmpeg Command API",
    "description": "API for running FFmpeg in a cloud environment",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.rendi.dev"
    }
  ],
  "paths": {
    "/v1/commands/{command_id}": {
      "get": {
        "tags": [
          "API",
          "FFmpeg Commands"
        ],
        "summary": "Get Command Status",
        "description": "Get the status of a previously submitted FFmpeg command.",
        "operationId": "poll_command_v1_commands__command_id__get",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "command_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The UUID of the FFmpeg command to check status for",
              "title": "Command Id"
            },
            "description": "The UUID of the FFmpeg command to check status for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid authorization key"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/commands": {
      "get": {
        "tags": [
          "API",
          "FFmpeg Commands"
        ],
        "summary": "Get list of commands sent",
        "description": "Get the statuses of a previously submitted FFmpeg commands.",
        "operationId": "get_commands_v1_commands_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CommandsListItemResponse"
                  },
                  "type": "array",
                  "title": "Response Get Commands V1 Commands Get"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid authorization key"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "422": {
            "description": "Invalid request"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/commands/{command_id}/files": {
      "delete": {
        "tags": [
          "API"
        ],
        "summary": "Delete Command Files",
        "description": "Delete all stored output files associated with a command",
        "operationId": "delete_command_files_v1_commands__command_id__files_delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "command_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Command Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid authorization key"
                }
              }
            }
          },
          "404": {
            "description": "Command files not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/files/{file_id}": {
      "delete": {
        "tags": [
          "API"
        ],
        "summary": "Delete Stored File in Rendi",
        "description": "Delete a stored file in Rendi",
        "operationId": "delete_stored_file_v1_files__file_id__delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The UUID of the file to delete",
              "title": "File Id"
            },
            "description": "The UUID of the file to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid authorization key"
                }
              }
            }
          },
          "404": {
            "description": "File not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/run-ffmpeg-command": {
      "post": {
        "tags": [
          "API",
          "FFmpeg Commands"
        ],
        "summary": "Run FFmpeg Command",
        "description": "Submit an FFmpeg command for processing with input and output file specifications.",
        "operationId": "run_ffmpeg_command_v1_run_ffmpeg_command_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FFmpegCommandRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully submitted FFmpeg command",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResponse"
                },
                "example": {
                  "command_id": "123e4567-e89b-12d3-a456-426614174000"
                }
              }
            }
          },
          "403": {
            "description": "Quota exceeded"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid authorization key"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/files/upload": {
      "post": {
        "tags": [
          "API",
          "File Management"
        ],
        "summary": "Upload File",
        "description": "Upload a file to Rendi storage for later use in commands. Make sure to use multipart/form-data when uploading the file. You can use these files as input files for commands.",
        "operationId": "upload_file_v1_files_upload_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_v1_files_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RendiStoredFile"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid authorization key"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "413": {
            "description": "File too large"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/files": {
      "get": {
        "tags": [
          "API",
          "FFmpeg Commands"
        ],
        "summary": "Get list of all stored files",
        "description": "Get the list of all stored files for an account.",
        "operationId": "get_files_v1_files_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RendiStoredFile"
                  },
                  "type": "array",
                  "title": "Response Get Files V1 Files Get"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid authorization key"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "422": {
            "description": "Invalid request"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/run-chained-ffmpeg-commands": {
      "post": {
        "tags": [
          "API",
          "FFmpeg Commands"
        ],
        "summary": "Run Chained FFmpeg Commands which are dependent on each other",
        "description": "(Endpoint in construction - talk to us for early access at support@rendi.dev)\n        Submit multiple FFmpeg commands where following commands are dependent on output of previous commands.         Running chained FFmpeg commands is faster than running each command seperately because we re-use system         and network resources between the multiple ffmpeg commands",
        "operationId": "run_chained_ffmpeg_commands_v1_run_chained_ffmpeg_commands_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FFmpegChainedCommandsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid authorization key"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/run-multiple-ffmpeg-commands": {
      "post": {
        "tags": [
          "API",
          "FFmpeg Commands"
        ],
        "summary": "Run Multiple FFmpeg Commands",
        "description": "(Endpoint in construction - talk to us for early access at support@rendi.dev)\nSubmit multiple FFmpeg commands based on the same input files for multiple processing.     Running multiple FFmpeg commands is faster than running each command seperately because we re-use system     and network resources between the multiple ffmpeg commands",
        "operationId": "run_multiple_ffmpeg_commands_v1_run_multiple_ffmpeg_commands_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FFmpegMutiplieCommandsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid authorization key"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Body_upload_file_v1_files_upload_post": {
        "properties": {
          "upload_file": {
            "type": "string",
            "format": "binary",
            "title": "Upload File",
            "description": "The file to upload"
          }
        },
        "type": "object",
        "required": [
          "upload_file"
        ],
        "title": "Body_upload_file_v1_files_upload_post"
      },
      "CommandResponse": {
        "properties": {
          "command_id": {
            "type": "string",
            "format": "uuid",
            "title": "Command Id",
            "description": "Unique identifier for the submitted command",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "type": "object",
        "required": [
          "command_id"
        ],
        "title": "CommandResponse",
        "description": "Response model for command submission.\n\nContains the unique identifier assigned to the submitted command that can be used\nto poll for status and retrieve results."
      },
      "CommandStatus": {
        "type": "string",
        "enum": [
          "QUEUED",
          "PROCESSING",
          "FAILED",
          "SUCCESS"
        ],
        "title": "CommandStatus"
      },
      "CommandStatusResponse": {
        "properties": {
          "command_id": {
            "type": "string",
            "title": "Command Id",
            "description": "Unique identifier for the submitted command",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "status": {
            "$ref": "#/components/schemas/CommandStatus",
            "description": "Current status of the FFmpeg command",
            "example": "SUCCESS"
          },
          "error_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Status",
            "description": "Status of any error that occurred during command execution",
            "example": "UNREACHABLE_INPUT_FILE"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message",
            "description": "Error details if the command failed",
            "example": "Input file url https://rendi.dev/example does not have a valid file name in its' end."
          },
          "output_files": {
            "anyOf": [
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/RendiStoredFileMetadata"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Files",
            "description": "Dictionary mapping file aliases to their output file storage",
            "example": {
              "out_1": {
                "bitrate_audio_kb": 242.349609375,
                "bitrate_video_kb": 370.5654296875,
                "codec": "h264",
                "duration": 30.0,
                "file_format": "mp4",
                "file_id": "f775b15d-67e9-4235-b89f-4bb33c0a5f57",
                "file_type": "video",
                "frame_rate": 24.0,
                "height": 320,
                "is_varying_frame_rate": false,
                "size_mbytes": 2.2677812576293945,
                "storage_url": "https://storage.rendi.dev/temp_files/224ea098-5c10-419b-8a77-707d89443c56/42c95292-d953-4b5a-8a58-cf1513363a33/output_320p.mp4",
                "width": 568
              },
              "out_2": {
                "bitrate_audio_kb": 239.9833984375,
                "bitrate_video_kb": 160.955078125,
                "codec": "h264",
                "duration": 596.459,
                "file_format": "mp4",
                "file_id": "9df00eca-3221-49c6-8a64-07850c9a5921",
                "file_type": "video",
                "frame_rate": 24.0,
                "height": 180,
                "is_varying_frame_rate": false,
                "size_mbytes": 29.620187759399414,
                "storage_url": "https://storage.rendi.dev/temp_files/224ea098-5c10-419b-8a77-707d89443c56/42c95292-d953-4b5a-8a58-cf1513363a33/output_180p.mp4",
                "width": 320
              }
            }
          },
          "original_request": {
            "type": "object",
            "title": "Original Request",
            "description": "The original request that was sent to the server",
            "example": {
              "ffmpeg_command": "-i {{in_1}} -ss 00:00 -to 00:30 -filter_complex [0:v]split=2[vid1][vid2];[vid1]scale=trunc(oh*a/2)*2:320:force_original_aspect_ratio=decrease,pad=trunc(oh*a/2)*2:320:-1:-1[320p];[vid2]scale=trunc(oh*a/2)*2:180:force_original_aspect_ratio=decrease,pad=trunc(oh*a/2)*2:180:-1:-1[180p] -map [320p] -map 0:a -c:a copy -c:v libx264 -preset medium {{out_1}}  -map [180p] -map 0:a -c:a copy -c:v libx264 -preset medium {{out_2}}",
              "input_files": {
                "in_1": "https://storage.rendi.dev/sample/sample.avi"
              },
              "output_files": {
                "out_1": "output_320p.mp4",
                "out_2": "output_180p.mp4"
              }
            }
          },
          "ffmpeg_command_run_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ffmpeg Command Run Seconds",
            "description": "The exact time the specific FFMPEG command took on our servers, in seconds"
          },
          "total_processing_seconds": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Processing Seconds",
            "description": "Processing time, in seconds, since recieving the command, this includes network times, parsing times, and FFMPEG command execution time"
          }
        },
        "type": "object",
        "required": [
          "command_id",
          "status",
          "original_request"
        ],
        "title": "CommandStatusResponse",
        "description": "Response model for FFmpeg command status.\n\nContains information about the command execution status, any errors that occurred,\noutput files generated, and the original request details.",
        "example": {
          "command_id": "123e4567-e89b-12d3-a456-426614174000",
          "ffmpeg_command_run_seconds": 19.58051347732544,
          "original_request": {
            "ffmpeg_command": "-i {{in_1}} -ss 00:00 -to 00:30 -filter_complex [0:v]split=2[vid1][vid2];[vid1]scale=trunc(oh*a/2)*2:320:force_original_aspect_ratio=decrease,pad=trunc(oh*a/2)*2:320:-1:-1[320p];[vid2]scale=trunc(oh*a/2)*2:180:force_original_aspect_ratio=decrease,pad=trunc(oh*a/2)*2:180:-1:-1[180p] -map [320p] -map 0:a -c:a copy -c:v libx264 -preset medium {{out_1}}  -map [180p] -map 0:a -c:a copy -c:v libx264 -preset medium {{out_2}}",
            "input_files": {
              "in_1": "https://storage.rendi.dev/sample/sample.avi"
            },
            "output_files": {
              "out_1": "output_320p.mp4",
              "out_2": "output_180p.mp4"
            }
          },
          "output_files": {
            "out_1": {
              "bitrate_audio_kb": 242.349609375,
              "bitrate_video_kb": 370.5654296875,
              "codec": "h264",
              "duration": 30.0,
              "file_format": "mp4",
              "file_id": "f775b15d-67e9-4235-b89f-4bb33c0a5f57",
              "file_type": "video",
              "frame_rate": 24.0,
              "height": 320,
              "is_varying_frame_rate": false,
              "size_mbytes": 2.2677812576293945,
              "storage_url": "https://storage.rendi.dev/temp_files/224ea098-5c10-419b-8a77-707d89443c56/42c95292-d953-4b5a-8a58-cf1513363a33/output_320p.mp4",
              "width": 568
            },
            "out_2": {
              "bitrate_audio_kb": 239.9833984375,
              "bitrate_video_kb": 160.955078125,
              "codec": "h264",
              "duration": 596.459,
              "file_format": "mp4",
              "file_id": "9df00eca-3221-49c6-8a64-07850c9a5921",
              "file_type": "video",
              "frame_rate": 24.0,
              "height": 180,
              "is_varying_frame_rate": false,
              "size_mbytes": 29.620187759399414,
              "storage_url": "https://storage.rendi.dev/temp_files/224ea098-5c10-419b-8a77-707d89443c56/42c95292-d953-4b5a-8a58-cf1513363a33/output_180p.mp4",
              "width": 320
            }
          },
          "status": "SUCCESS",
          "total_processing_seconds": 24.955581
        }
      },
      "CommandsListItemResponse": {
        "properties": {
          "command_id": {
            "type": "string",
            "title": "Command Id",
            "description": "Unique identifier for the submitted command",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "error_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Status",
            "description": "Status of any error that occurred during command execution",
            "example": "UNREACHABLE_INPUT_FILE"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message",
            "description": "Error details if the command failed",
            "example": "Input file url https://rendi.dev/example does not have a valid file name in its' end."
          },
          "status": {
            "$ref": "#/components/schemas/CommandStatus",
            "description": "Current status of the FFmpeg command",
            "example": "SUCCESS"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Time when the command was created, in UTC"
          }
        },
        "type": "object",
        "required": [
          "command_id",
          "status"
        ],
        "title": "CommandsListItemResponse",
        "description": "Response model for FFmpeg command list request.\n\nContains information about the commands sent to the server, execution status, any errors that occurred\nand the time when the command was created.",
        "example": {
          "command_id": "123e4567-e89b-12d3-a456-426614174000",
          "created_at": "2024-01-01T00:00:00Z",
          "status": "SUCCESS"
        }
      },
      "CommandsResponse": {
        "properties": {
          "command_ids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Command Ids",
            "description": "List of unique identifiers for the submitted FFmpeg commands, order by original commands order",
            "example": [
              "123e4567-e89b-12d3-a456-426614174000",
              "987fcdeb-a89b-43d3-b456-789012345678"
            ]
          }
        },
        "type": "object",
        "required": [
          "command_ids"
        ],
        "title": "CommandsResponse",
        "description": "Response model containing a list of command IDs returned from a batch command submission.\n\nThis model is used to return the unique identifiers for multiple FFmpeg commands that were\nsubmitted together. The command IDs are returned in the same order as the original command\nsubmission order."
      },
      "FFmpegChainedCommandsRequest": {
        "properties": {
          "input_files": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Input Files",
            "description": "Dictionary mapping file aliases to their publicly accessible paths, \n        file name should appear in the end of the url, keys must start with 'in_'. \n        You can use public file urls, google drive, dropbox, rendi stored files, s3 stored files, etc. as long as they are publicly accessible.",
            "example": {
              "in_1": "https://storage.rendi.dev/sample/first-video.avi",
              "in_2": "https://storage.rendi.dev/sample/second-video.avi"
            }
          },
          "output_files": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Output Files",
            "description": "Dictionary mapping file aliases to their desired output file names, keys must start with 'out_'.             Output files can both be used as interm files as input for chained ffmpeg commands.             Unlike interim files, output files will be stored in storage for later access. ",
            "example": {
              "out_1": "output_concatenated_1080.avi",
              "out_2": "thumbnail_1080.jpeg"
            }
          },
          "interim_files": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Interim Files",
            "description": "These files are used for interm creation and processing between the ffmpeg chains.             This is a dictionary mapping file aliases to their local paths, keys must start with 'inter_'",
            "example": {
              "inter_1": "concatenated_video.avi"
            }
          },
          "ffmpeg_chained_commands": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Ffmpeg Chained Commands",
            "description": "FFmpeg commands list of strings using {{alias}} placeholders for input, interim and output files.         The interm files will only be stored on the local machine running FFMPEG",
            "example": [
              "-i {{in_1}} -i {{in_2}} -filter_complex '[0:v][1:v]hstack=inputs=2[v]' -map '[v]' {{inter_1}}",
              "-i {{inter_1}} -vf scale=1920:1080 {{out_1}}",
              "-i {{out_1}} -ss 00:17 -vframes 1 {{out_2}}"
            ]
          }
        },
        "type": "object",
        "required": [
          "input_files",
          "output_files",
          "interim_files",
          "ffmpeg_chained_commands"
        ],
        "title": "FFmpegChainedCommandsRequest",
        "description": "Request model for submitting chained FFmpeg commands.\n\nThis model allows submitting multiple FFmpeg commands that run sequentially, where output files from earlier commands\ncan be used as inputs to later commands. It supports both interim files (temporary) and output files (stored).",
        "example": {
          "ffmpeg_chained_commands": [
            "-i {{in_1}} -i {{in_2}} -filter_complex '[0:v][1:v]hstack=inputs=2[v]' -map '[v]' {{inter_1}}",
            "-i {{inter_1}} -vf scale=1920:1080 {{out_1}}",
            "-i {{out_1}} -ss 00:17 -vframes 1 {{out_2}}"
          ],
          "input_files": {
            "in_1": "https://storage.rendi.dev/sample/first-video.avi",
            "in_2": "https://storage.rendi.dev/sample/second-video.avi"
          },
          "interim_files": {
            "inter_1": "concatenated_video.avi"
          },
          "output_files": {
            "out_1": "output_concatenated_1080.avi",
            "out_2": "thumbnail_1080.jpeg"
          }
        }
      },
      "FFmpegCommandRequest": {
        "properties": {
          "input_files": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Input Files",
            "description": "Dictionary mapping file aliases to their publicly accessible paths, \n        file name should appear in the end of the url, keys must start with 'in_'. \n        You can use public file urls, google drive, dropbox, rendi stored files, s3 stored files, etc. as long as they are publicly accessible.",
            "example": {
              "in_1": "https://storage.rendi.dev/sample/first-video.avi",
              "in_2": "https://storage.rendi.dev/sample/second-video.avi"
            }
          },
          "output_files": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Output Files",
            "description": "Dictionary mapping file aliases to their desired output file names, keys must start with 'out_'",
            "example": {
              "out_1": "output_one.avi",
              "out_2": "output_two.avi"
            }
          },
          "ffmpeg_command": {
            "type": "string",
            "title": "Ffmpeg Command",
            "description": "FFmpeg command string using {{alias}} placeholders for input and output files",
            "example": "-i {{in_1}} -i {{in_2}} -filter_complex [0:v][1:v]hstack=inputs=2[v] -map [v] {{out_1}}"
          }
        },
        "type": "object",
        "required": [
          "input_files",
          "output_files",
          "ffmpeg_command"
        ],
        "title": "FFmpegCommandRequest",
        "description": "Request model for submitting a single FFmpeg command.\n\nThis model allows submitting an FFmpeg command with input and output file specifications.\nInput file aliases must start with 'in_' and direct to a publicly accessible file, and\noutput file aliases must start with 'out_' and only name a file name to be created.",
        "example": {
          "ffmpeg_command": "-i {{in_1}} -i {{in_2}} -filter_complex [0:v][1:v]hstack=inputs=2[v] -map [v] {{out_1}}",
          "input_files": {
            "in_1": "https://storage.rendi.dev/sample/first-video.avi",
            "in_2": "https://storage.rendi.dev/sample/second-video.avi"
          },
          "output_files": {
            "out_1": "output.avi"
          }
        }
      },
      "FFmpegMutiplieCommandsRequest": {
        "properties": {
          "input_files": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Input Files",
            "description": "Dictionary mapping file aliases to their publicly accessible paths, \n        file name should appear in the end of the url, keys must start with 'in_'. \n        You can use public file urls, google drive, dropbox, rendi stored files, s3 stored files, etc. as long as they are publicly accessible.",
            "example": {
              "in_1": "https://storage.rendi.dev/sample/first-video.avi",
              "in_2": "https://storage.rendi.dev/sample/second-video.avi"
            }
          },
          "output_files": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Output Files",
            "description": "Dictionary mapping file aliases to their desired output file names, keys must start with 'out_'",
            "example": {
              "out_1": "output_one.avi",
              "out_2": "output_two.avi"
            }
          },
          "ffmpeg_commands": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Ffmpeg Commands",
            "description": "FFmpeg commands list of strings using {{alias}} placeholders for input and output files",
            "example": [
              "-i {{in_1}} -vf scale=1280:720 {{out_1}}",
              "-i {{in_1}} -vf scale=1920:1080 {{out_2}}"
            ]
          }
        },
        "type": "object",
        "required": [
          "input_files",
          "output_files",
          "ffmpeg_commands"
        ],
        "title": "FFmpegMutiplieCommandsRequest",
        "description": "Request model for submitting multiple FFmpeg commands.\n\nThis model allows submitting multiple FFmpeg commands that run in parallel, where each command can use the same input files\nto generate different output files. For example, this can be used to generate multiple versions of a video with different\nresolutions or formats in a single request.",
        "example": {
          "ffmpeg_commands": [
            "-i {{in_1}} -vf scale=1280:720 {{out_1}}",
            "-i {{in_1}} -vf scale=1920:1080 {{out_2}}"
          ],
          "input_files": {
            "in_1": "https://storage.rendi.dev/sample/input-video.avi"
          },
          "output_files": {
            "out_1": "output_720.avi",
            "out_2": "output_1080.avi"
          }
        }
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "RendiStoredFile": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id",
            "description": "Unique identifier for the output file",
            "example": "987fcdeb-a89b-43d3-b456-789012345678"
          },
          "size_mbytes": {
            "type": "number",
            "title": "Size Mbytes",
            "description": "Size of the output file in megabytes",
            "example": 15.2
          },
          "storage_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Url",
            "description": "URL where the file is stored",
            "example": "https://storage.rendi.dev/123e4567-e89b-12d3-a456-426614174000/output.avi"
          }
        },
        "type": "object",
        "required": [
          "file_id",
          "size_mbytes"
        ],
        "title": "RendiStoredFile",
        "description": "Represents a file stored by rendi. Could either be an uploaded file or a file generated by running a command.\n\nBasic model containing file location size and id."
      },
      "RendiStoredFileMetadata": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id",
            "description": "Unique identifier for the output file",
            "example": "987fcdeb-a89b-43d3-b456-789012345678"
          },
          "size_mbytes": {
            "type": "number",
            "title": "Size Mbytes",
            "description": "Size of the output file in megabytes",
            "example": 15.2
          },
          "storage_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Url",
            "description": "URL where the file is stored",
            "example": "https://storage.rendi.dev/123e4567-e89b-12d3-a456-426614174000/output.avi"
          },
          "is_deleted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Deleted",
            "description": "Whether the file has been deleted",
            "example": false
          },
          "duration": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration",
            "description": "Duration of the media file in seconds",
            "example": 30.5
          },
          "file_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Type",
            "description": "Type of the media file (video, audio, image, subtitles, etc.)",
            "example": "video"
          },
          "file_format": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Format",
            "description": "Format/container of the media file",
            "example": "avi"
          },
          "width": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Width",
            "description": "Width of the video in pixels",
            "example": 1920
          },
          "height": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Height",
            "description": "Height of the video in pixels",
            "example": 1080
          },
          "codec": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Codec",
            "description": "Codec used for the media file",
            "example": "msmpeg4v2"
          },
          "frame_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Frame Rate",
            "description": "Frame rate of the video in frames per second",
            "example": 30.0
          },
          "bitrate_video_kb": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bitrate Video Kb",
            "description": "Video bitrate in kilobits per second",
            "example": 4000.0
          },
          "bitrate_audio_kb": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bitrate Audio Kb",
            "description": "Audio bitrate in kilobits per second",
            "example": 128.0
          },
          "is_varying_frame_rate": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Varying Frame Rate",
            "description": "Whether the video has a variable frame rate",
            "example": false
          }
        },
        "type": "object",
        "required": [
          "file_id",
          "size_mbytes"
        ],
        "title": "RendiStoredFileMetadata",
        "description": "Represents a file stored by rendi. Could either be an uploaded file or a file generated by running a command.\n\nThis model contains metadata about files stored in rendi storage, including file details,\nmedia information, and storage location."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "description": "API key required for authentication. Must be provided in the X-API-KEY header.",
        "in": "header",
        "name": "X-API-KEY"
      }
    }
  }
}